<?xml version="1.0" encoding="UTF-8"?>
<!--
 
 Author: Bart van der Werf aka bartwe <bluelive@gmail.com>
 Copyright (C) 2010 Amos Wenger aka nddrylliog <amoswenger@gmail.com>
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.
 
 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.
 
-->
<language id="pluk" _name="Pluk" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-pluk</property>
    <property name="globs">*.pluk</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="error" _name="Error" map-to="def:error"/>
    <style id="escaped-character" _name="Escaped Character" map-to="def:special-char"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="external" _name="External" map-to="def:preprocessor"/>
    <style id="declaration" _name="Declaration" map-to="def:type"/>
    <style id="storage-class" _name="Storage Class" map-to="def:type"/>
    <style id="scope-declaration" _name="Scope Declaration" map-to="def:type"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="null-value" _name="Null Value" map-to="def:special-constant"/>
    <style id="boolean" _name="Boolean value" map-to="def:boolean"/>
    <style id="floating-point" _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal" _name="Decimal number" map-to="def:decimal"/>
    <style id="octal" _name="Octal number" map-to="def:base-n-integer"/>
    <style id="binary" _name="Binary number" map-to="def:base-n-integer"/>
    <style id="hexadecimal" _name="Hexadecimal number" map-to="def:base-n-integer"/>
    <style id="reserved" _name="Future Reserved Keywords" map-to="def:error"/>
    <style id="type" _name="Data Type" map-to="def:type"/>
  </styles>

  <definitions>

    <define-regex id="escaped-character" extended="true">
      \\(               # leading backslash
      [\\\"\'nrbtf] |   # escaped character
      [0-9]{1,3}    |   # latin encoded char
      u[0-9]{1,4}       # unicode char
      )
    </define-regex>

    <context id="string" style-ref="string" end-at-line-end="false">
      <start>"</start>
      <end>"</end>
      <include>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
      </include>
    </context>

    <context id="line-comment" style-ref="comment" end-at-line-end="true">
      <start>//</start>
      <include>
        <context ref="def:in-line-comment"/>
      </include>
    </context>

    <context id="block-comment" style-ref="comment">
      <start>/\*</start>
      <end>\*/</end>
      <include>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="close-comment-outside-comment" style-ref="error">
      <match>\*/(?!\*)</match>
    </context>

    <context id="externals" style-ref="external">
      <keyword>import</keyword>
    </context>

    <context id="declarations" style-ref="declaration">
      <keyword>class</keyword>
    </context>

    <context id="primitive-types" style-ref="type">
      <keyword>bool</keyword>
      <keyword>byte</keyword>
      <keyword>float</keyword>
      <keyword>int</keyword>
      <keyword>void</keyword>
      <keyword>string</keyword>
    </context>

    <context id="storage-class" style-ref="storage-class">
      <keyword>abstract</keyword>
      <keyword>static</keyword>
      <keyword>extern</keyword>
      <keyword>override</keyword>
    </context>

    <context id="scope-declarations" style-ref="scope-declaration">
      <keyword>private</keyword>
      <keyword>protected</keyword>
      <keyword>public</keyword>
      <keyword>internal</keyword>
    </context>

    <context id="flow" style-ref="keyword">
      <keyword>break</keyword>
      <keyword>catch</keyword>
      <keyword>continue</keyword>
      <keyword>else</keyword>
      <keyword>finally</keyword>
      <keyword>for</keyword>
      <keyword>if</keyword>
      <keyword>return</keyword>
      <keyword>recur</keyword>
      <keyword>throw</keyword>
      <keyword>try</keyword>
      <keyword>while</keyword>
      <keyword>with</keyword>
      <keyword>scope</keyword>
    </context>

    <context id="memory" style-ref="keyword">
      <keyword>new</keyword>
      <keyword>this</keyword>
    </context>

    <context id="future-reserved-words" style-ref="reserved">
      <keyword>const</keyword>
      <keyword>goto</keyword>
    </context>

    <context id="null-value" style-ref="null-value">
      <keyword>null</keyword>
    </context>

    <context id="boolean" style-ref="boolean">
      <keyword>false</keyword>
      <keyword>true</keyword>
    </context>

    <context id="float" style-ref="floating-point">
        <match extended="true">
            (?&lt;![\w\.])
            ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
            ([0-9]+[Ee][+-]?[0-9]*))
            [fFlL]?
            (?![\w\.])
        </match>
    </context>

    <context id="hexadecimal" style-ref="hexadecimal">
        <match extended="true">
            (?&lt;![\w\.])
            0[x][a-fA-F0-9]+
            (?![\w\.])
        </match>
    </context>

    <context id="octal" style-ref="octal">
        <match extended="true">
            (?&lt;![\w\.])
            0[c][0-7]+
            (?![\w\.])
        </match>
    </context>

    <context id="binary" style-ref="binary">
        <match extended="true">
            (?&lt;![\w\.])
            0[b][0-1]+
            (?![\w\.])
        </match>
    </context>

    <context id="decimal" style-ref="decimal">
        <match extended="true">
            (?&lt;![\w\.])
            [0-9]+[uUlL]*
            (?![\w\.])
        </match>
    </context>

    <context id="pluk">
      <include>
        <context ref="string"/>
        <context ref="line-comment"/>
        <context ref="block-comment"/>
        <context ref="close-comment-outside-comment"/>
        <context ref="externals"/>
        <context ref="declarations"/>
        <context ref="primitive-types"/>
        <context ref="storage-class"/>
        <context ref="scope-declarations"/>
        <context ref="flow"/>
        <context ref="memory"/>
        <context ref="future-reserved-words"/>
        <context ref="null-value"/>
        <context ref="boolean"/>
        <context ref="decimal"/>
        <context ref="hexadecimal"/>
        <context ref="binary"/>
        <context ref="octal"/>
      </include>
    </context>

  </definitions>
</language>
